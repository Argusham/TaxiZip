"use client"
import { faClose, faComment, faInfo } from '@fortawesome/free-solid-svg-icons';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { useEffect, useState, useRef } from 'react';

export default function InfoHub() {
    const [isOpen, setIsOpen] = useState<boolean>(false);
    const [selected, setSelected] = useState<any>([]);
    const [currentPage, setCurrentPage] = useState<number>(0);
    const questionsPerPage = 4;

    const options = [
        {
            id: 1,
            question: 'How do I make a payment as a commuter?',
            answer: 'To make a payment, simply scan the QR code generated by the driver. You will be able to choose between cUSD (Celo Dollar) or Rand as your currency. Once you confirm the amount, the payment will be processed instantly using blockchain technology, ensuring transparency and security.'
        },
        {
            id: 2,
            question: 'How do I generate a QR code as a driver?',
            answer: 'As a driver, after entering your desired fare, the app will automatically generate a QR code for you. This QR code contains the payment details, which the commuter can scan to process the payment. You can also toggle between cUSD and Rand for currency selection.'
        },
        {
            id: 3,
            question: 'Can I switch the payment currency?',
            answer: 'Yes, you can toggle between cUSD (Celo Dollar) and Rand for payments. Simply select your preferred currency before generating the QR code or processing the payment.'
        },
        {
            id: 4,
            question: 'Is it safe to use blockchain for payments?',
            answer: 'Yes! Blockchain ensures that all transactions are secure and transparent. Each payment is recorded on the blockchain, preventing fraud or alterations, and providing a clear audit trail.'
        },
        {
            id: 5,
            question: 'What happens if the payment fails?',
            answer: 'If the payment fails, please double-check your internet connection and ensure that the correct currency and amount are selected. If the issue persists, contact support for further assistance.'
        },
        {
            id: 6,
            question: 'Do I need a cryptocurrency wallet to make payments?',
            answer: 'Yes, in order to pay using cUSD, you will need a compatible cryptocurrency wallet that supports the Celo network. The app integrates seamlessly with Celo wallets for easy transactions.'
        },
        {
            id: 7,
            question: 'Can I use my local currency (Rand) for payments?',
            answer: 'Absolutely! You can toggle between cUSD and Rand as your preferred payment currency. This flexibility allows for both blockchain and traditional payments to be made effortlessly.'
        },
        {
            id: 8,
            question: 'How long does it take for a payment to be processed?',
            answer: 'Payments are processed instantly via the blockchain, ensuring both the driver and commuter experience minimal wait times.'
        },
        {
            id: 9,
            question: 'Can the driver change the fare after generating the QR code?',
            answer: 'No, once the QR code is generated with the fare amount, it cannot be altered. If you need to change the fare, you must regenerate a new QR code with the updated amount.'
        },
        {
            id: 10,
            question: 'What happens if I scan the wrong QR code?',
            answer: 'If you scan the wrong QR code, the payment will not go through. Please ensure that the QR code is coming from the correct driver and corresponds to your intended payment amount.'
        }
    ];

    const messagesEndRef = useRef<any>(null);

    const toggleChatbot = () => {
        setIsOpen(prevState => !prevState);
    };

    const handleQuestionChoice = (id: any) => {
        const question = options.find(op => op.id === id);
        setSelected((prevQuestions: any) => [...prevQuestions, question]);
    }

    const handleShowMoreQuestions = () => {
        if (startIndex + questionsPerPage >= options.length) {
            setCurrentPage(0);  // Restart when we reach the end
        } else {
            setCurrentPage(prevPage => prevPage + 1);
        }
    }

    let startIndex = currentPage * questionsPerPage;
    const currentQuestions = options.slice(startIndex, startIndex + questionsPerPage);

    useEffect(() => {
        if (messagesEndRef.current) {
            messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
        }

    }, [selected, currentQuestions]);

    return (
        <div style={{ position: 'absolute', zIndex: 2 }}>
            {/* Chatbot Icon */}
            <button
                onClick={toggleChatbot}
                className={`fixed bottom-2 right-4 bg-neon ${isOpen ? 'hidden' : ''} bg-blue-500 p-3 rounded-full transition-transform transform translate-y-12 hover:scale-110 animate-float`}
            >
                <FontAwesomeIcon icon={faInfo} className="w-8 h-8 text-white" />
            </button>

            {/* Chatbot Popup */}
            <div
                className={`fixed bottom-4 right-2 left-2 w-[calc(100% - 8px)] bg-gray-800 ${isOpen ? '' : 'hidden'} text-white rounded-lg transition-transform transform translate-y-0 opacity-100 animate-float`}
            >
                <div className="flex items-center justify-between p-4 border-b border-gray-700">
                    <h2 className="text-xl font-semibold">Taxify Siyaya InfoHub</h2>
                    <button
                        onClick={toggleChatbot}
                        className="p-2 rounded-full hover:bg-gray-700"
                    >
                        <FontAwesomeIcon icon={faClose} className="w-6 h-6 text-white" />
                    </button>
                </div>
                <div className="p-4 overflow-y-auto h-60">
                    {/* Chat messages go here */}
                    <div className="space-y-4">
                        <div className="bg-gray-700 p-2 rounded-lg mr-14">
                            <p>Thou hast summoned the divine presence.</p>
                        </div>
                        <div className="bg-gray-700 p-2 rounded-lg mr-14">
                            <p>Speak thy will, and I shall bestow upon thee my wisdom and favor.</p>
                        </div>

                        {selected.map((chosenQuestion: any, index: any) => (
                            <div key={index}>
                                <div className="bg-gray-600 p-2 rounded-lg ml-14">
                                    <p>{chosenQuestion.question}</p>
                                </div>
                                <div className="bg-gray-700 p-2 rounded-lg mr-14 mt-[18px]">
                                    <p>{chosenQuestion.answer}</p>
                                </div>
                            </div>
                        ))}
                        <div ref={messagesEndRef}></div>
                    </div>
                </div>
                <div className="p-4 pb-12 border-t border-gray-700" style={{ position: 'relative' }}>
                    {currentQuestions.map(option => (
                        <button
                            key={option.id}
                            className="border p-2 m-2 text-xs bg-gray-800 border-neon rounded-lg text-neon hover:bg-gray-700 hover:border-white transition-transform transform hover:scale-105"
                            onClick={() => handleQuestionChoice(option.id)}
                        >
                            {option.question}
                        </button>
                    ))}
                    <button
                        style={{ position: 'absolute', right: 20, bottom: 20 }}
                        className="text-xs text-neon hover:text-white transition-transform transform hover:scale-110"
                        onClick={handleShowMoreQuestions}
                    >
                        Show other questions
                    </button>
                </div>
            </div>

            {/* Floating animation CSS */}
            <style jsx global>{`
                @keyframes float {
                  0% {
                    transform: translateY(0);
                  }
                  50% {
                    transform: translateY(-10px);
                  }
                  100% {
                    transform: translateY(0);
                  }
                }

                .animate-float {
                  animation: float 3s ease-in-out infinite;
                }
            `}</style>
        </div>
    );
}
